{
  "compiler": {
    "version": "0.8.9+commit.e5eed63a"
  },
  "language": "Solidity",
  "output": {
    "abi": [
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "authorizers",
            "type": "address[]"
          },
          {
            "internalType": "address",
            "name": "airnode",
            "type": "address"
          },
          {
            "internalType": "bytes32",
            "name": "requestId",
            "type": "bytes32"
          },
          {
            "internalType": "bytes32",
            "name": "endpointId",
            "type": "bytes32"
          },
          {
            "internalType": "address",
            "name": "sponsor",
            "type": "address"
          },
          {
            "internalType": "address",
            "name": "requester",
            "type": "address"
          }
        ],
        "name": "checkAuthorizationStatus",
        "outputs": [
          {
            "internalType": "bool",
            "name": "status",
            "type": "bool"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      },
      {
        "inputs": [
          {
            "internalType": "address[]",
            "name": "authorizers",
            "type": "address[]"
          },
          {
            "internalType": "address",
            "name": "airnode",
            "type": "address"
          },
          {
            "internalType": "bytes32[]",
            "name": "requestIds",
            "type": "bytes32[]"
          },
          {
            "internalType": "bytes32[]",
            "name": "endpointIds",
            "type": "bytes32[]"
          },
          {
            "internalType": "address[]",
            "name": "sponsors",
            "type": "address[]"
          },
          {
            "internalType": "address[]",
            "name": "requesters",
            "type": "address[]"
          }
        ],
        "name": "checkAuthorizationStatuses",
        "outputs": [
          {
            "internalType": "bool[]",
            "name": "statuses",
            "type": "bool[]"
          }
        ],
        "stateMutability": "view",
        "type": "function"
      }
    ],
    "devdoc": {
      "kind": "dev",
      "methods": {
        "checkAuthorizationStatus(address[],address,bytes32,bytes32,address,address)": {
          "details": "This method is meant to be called off-chain, statically by the Airnode to decide if it should respond to a request. The requester can also call it, yet this function returning true should not be taken as a guarantee of the subsequent request being fulfilled. It is enough for only one of the authorizer contracts to return true for the request to be authorized.",
          "params": {
            "airnode": "Airnode address",
            "authorizers": "Authorizer contract addresses",
            "endpointId": "Endpoint ID",
            "requestId": "Request ID",
            "requester": "Requester address",
            "sponsor": "Sponsor address"
          },
          "returns": {
            "status": "Authorization status of the request"
          }
        },
        "checkAuthorizationStatuses(address[],address,bytes32[],bytes32[],address[],address[])": {
          "params": {
            "airnode": "Airnode address",
            "authorizers": "Authorizer contract addresses",
            "endpointIds": "Endpoint IDs",
            "requestIds": "Request IDs",
            "requesters": "Requester addresses",
            "sponsors": "Sponsor addresses"
          },
          "returns": {
            "statuses": "Authorization statuses of the request"
          }
        }
      },
      "title": "Contract that implements authorization checks",
      "version": 1
    },
    "userdoc": {
      "kind": "user",
      "methods": {
        "checkAuthorizationStatus(address[],address,bytes32,bytes32,address,address)": {
          "notice": "Uses the authorizer contracts of an Airnode to decide if a request is authorized. Once an Airnode receives a request, it calls this method to determine if it should respond. Similarly, third parties can use this method to determine if a particular request would be authorized."
        },
        "checkAuthorizationStatuses(address[],address,bytes32[],bytes32[],address[],address[])": {
          "notice": "A convenience function to make multiple authorization status checks with a single call"
        }
      },
      "version": 1
    }
  },
  "settings": {
    "compilationTarget": {
      "lib/airnode/packages/airnode-protocol/contracts/rrp/AuthorizationUtilsV0.sol": "AuthorizationUtilsV0"
    },
    "evmVersion": "london",
    "libraries": {},
    "metadata": {
      "bytecodeHash": "ipfs"
    },
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "remappings": [
      ":@openzeppelin/=lib/openzeppelin-contracts/",
      ":airnode-protocol/=lib/airnode/packages/airnode-protocol/",
      ":airnode/=lib/airnode/",
      ":ds-test/=lib/forge-std/lib/ds-test/src/",
      ":forge-std/=lib/forge-std/src/",
      ":openzeppelin-contracts/=lib/openzeppelin-contracts/"
    ]
  },
  "sources": {
    "lib/airnode/packages/airnode-protocol/contracts/authorizers/interfaces/IAuthorizerV0.sol": {
      "keccak256": "0xa38872f5dead4dfc0c8075c245c10197df1ace09415f2e0d5b46bc8511cc3f6d",
      "license": "MIT",
      "urls": [
        "bzz-raw://28fb4b462d2d32e498b564b2d80cd9853834986f441e295727d3f0a6b222e141",
        "dweb:/ipfs/QmeBLpVGm4h3acLHTjCfbfHpRctufnwogzSmL1boHKwS1F"
      ]
    },
    "lib/airnode/packages/airnode-protocol/contracts/rrp/AuthorizationUtilsV0.sol": {
      "keccak256": "0xa3419ee8a4146a7716355e835102700bfdd12928ab83790d368a344e7819a502",
      "license": "MIT",
      "urls": [
        "bzz-raw://b0e27d2e4c3369ae88cd0a19119e64a11947f8360a376f9eea4dfd3ebaa08988",
        "dweb:/ipfs/QmSVcM4Vn9EFc8f8avGNwJ6qzMf9e4eLZuZmzMYBnsPMdB"
      ]
    },
    "lib/airnode/packages/airnode-protocol/contracts/rrp/interfaces/IAuthorizationUtilsV0.sol": {
      "keccak256": "0x597a40e9911628f6bc1d845c9ebe7c345833e8814caa5ce02a8597d3b4ee7975",
      "license": "MIT",
      "urls": [
        "bzz-raw://61c3e2fcf29d5cbc12b86ba82109675d1291def1e26e25982ad12859fe3d3a76",
        "dweb:/ipfs/QmPtfN5tmTgzGCXyxBQktuWAkxVWsg7Q7F8FB6YJveaDJq"
      ]
    }
  },
  "version": 1
}